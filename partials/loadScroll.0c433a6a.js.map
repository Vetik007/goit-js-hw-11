{"mappings":"gkBAOA,MAAMA,EAAO,CACXC,WAAYC,SAASC,cAAc,gBACnCC,QAASF,SAASC,cAAc,YAChCE,gBAAiBH,SAASC,cAAc,kBACxCG,YAAaJ,SAASC,cAAc,gBAGhCI,EAAW,IAAIC,EAAAC,GAAJ,CAAmB,aAAc,CAChDC,eAAgB,GAChBC,aAAc,MACdC,aAAc,MAGhB,IAAIC,EAAQ,GACRC,EAAO,EACPC,EAAU,EA2BdC,eAAeC,IACb,MACMC,SADiB,EAAAC,EAAAC,YAAWP,EAAOC,EA3B3B,KA4BgBO,KACxBC,EAAYJ,EAAaI,UAC/BP,GAAWG,EAAaK,KAAKC,OAEE,IAA3BN,EAAaI,WAGG,IAATR,GAwEb,SAA4BI,GAC1BV,EAAAiB,GAASC,OAAOC,QAAQ,oBAAoBT,EAAaI,oB,CAxEvDM,CAAmBV,GA8BvB,SAAuBW,GACrB,MAAMC,EAAgBD,EACnBE,KACC,EAACC,GACCA,EAAEC,cACFA,EAAaC,aACbA,EAAYC,KACZA,EAAIC,MACJA,EAAKC,MACLA,EAAKC,SACLA,EAAQC,UACRA,KAEO,oDACkCN,wDACCD,sCAClBE,WAAsBC,yJAGXC,4HAGAC,+HAGGC,gIAGCC,oHAQ1CC,KAAK,IAERxC,EAAKI,QAAQqC,mBAAmB,YAAaX,E,CAjE7CY,CAAcxB,EAAaK,MAC3BhB,EAASoC,UAGT7B,GAAQ,EACR8B,EAAGC,QAAQC,KAEP/B,IAAYO,GACdtB,EAAKK,gBAAgB0C,UAAUC,OAAO,cAqExCxC,EAAAiB,GAASC,OAAOuB,QACd,6D,CAnHJjD,EAAKC,WAAWiD,iBAAiB,UAEjClC,eAA4BmC,GAW1B,GAVAA,EAAEC,iBAEFtC,EAAO,EACPC,EAAU,EAEVF,EAAQb,EAAKM,YAAY+C,MAAMC,OAC/BtD,EAAKI,QAAQmD,UAAY,GAEzBvD,EAAKK,gBAAgB0C,UAAUS,IAAI,aAErB,KAAV3C,EAEF,YA+FFL,EAAAiB,GAASC,OAAOuB,QAAQ,+BA7FxB,IACEhC,G,CACA,MAAOwC,GACPjD,EAAAiB,GAASC,OAAOuB,QAAQ,+B,KA6B5B,MAAML,EAAK,IAAIc,sBAAqBC,IAClCA,EAAQC,SAAQC,IACdC,QAAQC,IAAIF,GACPA,EAAMG,iBAGXlB,IACA7B,IAAkB,GAClB,IAGJ,SAAS6B,IACP,OAAO5C,SAASC,cAAc,4B","sources":["src/js/loadScroll.js"],"sourcesContent":["import '../css/styles.css';\nimport { pixabayApi } from './serviseApi';\nimport Notiflix from 'notiflix';\n\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nconst refs = {\n  searchForm: document.querySelector('#search-form'),\n  gallery: document.querySelector('.gallery'),\n  endOfSearchText: document.querySelector('.gallery__text'),\n  searchInput: document.querySelector('.input-form'),\n};\n\nconst lightbox = new SimpleLightbox('.gallery a', {\n  overlayOpacity: 0.5,\n  captionsData: 'alt',\n  captionDelay: 250,\n});\n\nlet query = '';\nlet page = 1;\nlet loadImg = 0;\nconst perPage = 40;\n\nrefs.searchForm.addEventListener('submit', onSearchForm);\n\nasync function onSearchForm(e) {\n  e.preventDefault();\n\n  page = 1;\n  loadImg = 0;\n  // query = e.currentTarget.searchQuery.value.trim();\n  query = refs.searchInput.value.trim();\n  refs.gallery.innerHTML = '';\n\n  refs.endOfSearchText.classList.add('is-hidden');\n\n  if (query === '') {\n    alertEmptySearch();\n    return;\n  }\n  try {\n    createCollection();\n  } catch (error) {\n    Notiflix.Notify.failure('Ooops...Something goes wrong');\n  }\n}\n\nasync function createCollection() {\n  const response = await pixabayApi(query, page, perPage);\n  const responseData = response.data;\n  const totalHits = responseData.totalHits;\n  loadImg += responseData.hits.length;\n\n  if (responseData.totalHits === 0) {\n    alertNoImagesFound();\n    return;\n  } else if (page === 1) {\n    alertImagesToFound(responseData);\n  }\n\n  renderGallery(responseData.hits);\n  lightbox.refresh();\n  // const simpleLightBox = new SimpleLightbox('.gallery a').refresh();\n\n  page += 1;\n  io.observe(getLastImgEl());\n\n  if (loadImg === totalHits) {\n    refs.endOfSearchText.classList.remove('is-hidden');\n  }\n}\n\nconst io = new IntersectionObserver(entries => {\n  entries.forEach(entry => {\n    console.log(entry);\n    if (!entry.isIntersecting) {\n      return;\n    }\n    getLastImgEl();\n    createCollection();\n  });\n});\n\nfunction getLastImgEl() {\n  return document.querySelector('.gallery__link:last-child');\n}\n\nfunction renderGallery(images) {\n  const galleryMarkup = images\n    .map(\n      ({\n        id,\n        largeImageURL,\n        webformatURL,\n        tags,\n        likes,\n        views,\n        comments,\n        downloads,\n      }) => {\n        return `\n                <a class=\"gallery__link\" href=\"${largeImageURL}\">\n                    <div class=\"photo-card\" id=\"${id}\">\n                    <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" />\n                    <div class=\"info\">\n                        <p class=\"info-item\">\n                            <b>Likes</b> ${likes}\n                        </p>\n                        <p class=\"info-item\">\n                            <b>Views</b> ${views}\n                        </p>\n                        <p class=\"info-item\">\n                            <b>Comments</b> ${comments}\n                        </p>\n                        <p class=\"info-item\">\n                            <b>Downloads</b> ${downloads}\n                        </p>\n                    </div>\n                </div>\n                </a>\n    `;\n      }\n    )\n    .join('');\n\n  refs.gallery.insertAdjacentHTML('beforeend', galleryMarkup);\n}\n\nfunction alertImagesToFound(responseData) {\n  Notiflix.Notify.success(`Hooray! We found ${responseData.totalHits} images.`);\n}\n\nfunction alertEmptySearch() {\n  Notiflix.Notify.failure('This field cannot be empty!');\n}\n\nfunction alertNoImagesFound() {\n  Notiflix.Notify.failure(\n    'No images were found for this request, try something else.'\n  );\n}\n"],"names":["$99359de55954f607$var$refs","searchForm","document","querySelector","gallery","endOfSearchText","searchInput","$99359de55954f607$var$lightbox","$parcel$interopDefault","$fZKcF","overlayOpacity","captionsData","captionDelay","$99359de55954f607$var$query","$99359de55954f607$var$page","$99359de55954f607$var$loadImg","async","$99359de55954f607$var$createCollection","responseData","$gAHok","pixabayApi","data","totalHits","hits","length","$7Y9D8","Notify","success","$99359de55954f607$var$alertImagesToFound","images","galleryMarkup","map","id","largeImageURL","webformatURL","tags","likes","views","comments","downloads","join","insertAdjacentHTML","$99359de55954f607$var$renderGallery","refresh","$99359de55954f607$var$io","observe","$99359de55954f607$var$getLastImgEl","classList","remove","failure","addEventListener","e","preventDefault","value","trim","innerHTML","add","error","IntersectionObserver","entries","forEach","entry","console","log","isIntersecting"],"version":3,"file":"loadScroll.0c433a6a.js.map"}